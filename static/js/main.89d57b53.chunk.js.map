{"version":3,"sources":["redux/reducers.js","redux/store.js","redux/actionTypes.js","components/todoListItem.js","components/addTodo.js","modules/index.js","redux/actions.js","App.js","serviceWorker.js","index.js"],"names":["initialTodoState","data","createStore","combineReducers","TodoStateReducer","state","action","type","todos","push","payload","itemIndex","findIndex","todo","id","splice","window","__REDUX_DEVTOOLS_EXTENSION__","TodoListItem","onDelete","onStatusChange","text","completed","checked","onChange","placeholder","value","e","target","onClick","AddTodo","onAddItem","useState","setValue","Todos","props","slice","lastItem","addTodo","this","map","item","index","key","deleteTodo","updateTodo","Component","connect","App","store","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89d57b53.chunk.js","sourcesContent":["import { ADD_TODO, UPDATE_TODO, DELETE_TODO } from './actionTypes';\n\nconst initialTodoState = {\n    data: []\n}\n\nexport const TodoStateReducer = (state = initialTodoState, action) => {\n    switch (action.type) {\n        case ADD_TODO: {\n            let todos = [...state.data]\n            todos.push(action.payload)\n            return (\n                {\n                    ...state,\n                    data: todos\n                }\n            )\n        }\n\n        case DELETE_TODO: {\n            let todos = [...state.data];\n            let itemIndex = todos.findIndex(todo => todo.id === action.payload);\n\n            if (itemIndex > -1) {\n                todos.splice(itemIndex, 1);\n            }\n            return (\n                {\n                    ...state,\n                    data: todos\n                }\n            )\n        }\n\n        case UPDATE_TODO: {\n            let todos = [...state.data];\n            let itemIndex = todos.findIndex(todo => todo.id === action.payload.id);\n            if (itemIndex > -1) {\n                todos[itemIndex] = {\n                    ...todos[itemIndex],\n                    ...action.payload.data\n                }\n            }\n            return (\n                {\n                    ...state,\n                    data: todos\n                }\n            )\n        }\n\n        default: {\n            return state\n        }\n    }\n}","import {createStore, combineReducers} from 'redux';\nimport { TodoStateReducer } from './reducers';\n\nexport default createStore(combineReducers({ TodoStateReducer }), \nwindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n","export const ADD_TODO = 'ADD_TODO';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\n","import React from 'react';\n\nconst TodoListItem = ({ todo, onDelete, onStatusChange }) => {\n\n    const { id, text, completed } = todo;\n    // todos item list\n    return (\n        <li >\n            <input type=\"checkbox\" checked={completed} onChange={() => onStatusChange(id, { completed: !completed })} />\n\n            <input type=\"text\" placeholder='task' value={text} onChange={(e) => onStatusChange(id, { text: e.target.value })} />\n\n            <button onClick={() => onDelete(id)}>Delete</button>\n        </li>\n    )\n}\n\nexport default TodoListItem;\n","import React, { useState } from 'react';\n\n\nfunction AddTodo({ onAddItem }) {\n    const [value, setValue] = useState('');\n    // Add new todos form\n    return (\n        <div>\n            <input type=\"text\" onChange={(e) => setValue(e.target.value)} value={value} placeholder=\"Enter todo here\" />\n            <button onClick={() => {\n                onAddItem(value);\n                setValue('')\n            }} type=\"button\"> Add Item</button>\n        </div>\n    )\n}\n\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { addTodo, deleteTodo, updateTodo } from '../redux/actions';\nimport TodoListItem from '../components/todoListItem';\nimport AddTodo from '../components/addTodo';\nimport { TodoStateReducer } from '../redux/reducers';\n\n\nclass Todos extends Component {\n\n    \n    onAddItem = (text) => {\n        // Get id of last item\n        const [lastItem] = this.props.todos.slice(-1);\n \n\n        this.props.addTodo({\n            id: lastItem ? lastItem.id + 1 : 1,\n            text,\n            completed: false,\n        });\n    }\n\n    render() {\n        const { todos } = this.props; \n        // Todo form and list will automatically display here\n        return (\n            <div>\n                <AddTodo onAddItem={this.onAddItem} />\n                <ul>\n                    {todos.map((item, index) => (\n                        <TodoListItem\n                            key={index}\n                            todo={item}\n                            onDelete={this.props.deleteTodo}\n                            onStatusChange={this.props.updateTodo}\n                        />\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ TodoStateReducer }) => {\n    return {\n        todos: TodoStateReducer.data,\n    };\n};\n\nexport default connect(mapStateToProps, { addTodo, deleteTodo, updateTodo })(Todos);","import { ADD_TODO, UPDATE_TODO, DELETE_TODO } from './actionTypes';\n\nexport const addTodo = (todo) => (\n    {\n        type: ADD_TODO,\n        payload: todo\n    }\n)\n\nexport const updateTodo = (id, data) => (\n    {\n        type: UPDATE_TODO,\n        payload: {\n            id,\n            data\n        }\n    }\n)\n\nexport const deleteTodo = (id) => (\n    {\n        type: DELETE_TODO,\n        payload: id\n    }\n)\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\nimport Todos from './modules';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <h1>A REALLY RANDOM TODO APP</h1>\n        <Todos/> \n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}